/*
simple solution

class Solution {
    public int findKthLargest(int[] nums, int k) {
        Arrays.sort(nums);
        return nums[nums.length - k];
    }
}
*/

class Solution {
    public int findKthLargest(int[] nums, int k) {
        k = nums.length - k;
        int low = 0;
        int high = nums.length - 1;
        while(low < high){
            int j = partition(nums, low, high);
            if(j < k){
                low = j + 1;
            }
            else if(j > k){
                high = j - 1;
            }
            else break;
        }
        return nums[k];
    }
    int partition(int[] a, int low, int high){
        int i = low;
        int j = high + 1;
        while(true){
            while(i < high){
                if(a[++i] > a[low])break;
            }
            while(j > low){
                if(a[low] > a[--j])break;    
            }
            if(i >= j)break;
            swap(a, i, j);
        }
        swap(a, low, j);
        return j;
    }    
    void swap(int[] a, int i, int j){
        int t = a[i];
        a[i] = a[j];
        a[j] = t;
    }
}
